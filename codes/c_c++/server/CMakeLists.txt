# CMake最低版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.15)

# C/C++语言标准
SET(CMAKE_C_STANDARD            11)
SET(CMAKE_C_STANDARD_REQUIRED   ON)
SET(CMAKE_C_EXTENSIONS          OFF)
SET(CMAKE_CXX_STANDARD          17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS        OFF)

# Debug & Release选项
IF(NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug") AND NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "Release"))
    SET(CMAKE_BUILD_TYPE "Release" CACHE STRING INTERNAL FORCE)
    MESSAGE(STATUS "CMAKE_BUILD_TYPE is invalid, must be one of 'Debug | Release', set default build type to 'Release'.")
ENDIF()

# 项目名字
PROJECT(server)

# 根目录和编译生成目录
SET(CMAKE_PROJECT_ROOT_DIR       ${CMAKE_SOURCE_DIR})
SET(CMAKE_PROJECT_BUILD_ROOT_DIR ${CMAKE_SOURCE_DIR}/.build)

# 编译选项、生成目录、第三方库目录、静态库 & 动态库的前缀
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    # 编译选项
    SET(CMAKE_C_FLAGS           "${CMAKE_C_FLAGS} /std:c11 /permissive- /Zc:__cplusplus /bigobj /W3 /WX /MP")
    SET(CMAKE_C_FLAGS_DEBUG     "${CMAKE_C_FLAGS_DEBUG}")
    SET(CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}")

    SET(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} /std:c++17 /permissive- /Zc:__cplusplus /bigobj /W3 /WX /MP")
    SET(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

    # 生成目录
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_PROJECT_BUILD_ROOT_DIR})
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_PROJECT_BUILD_ROOT_DIR})
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_PROJECT_BUILD_ROOT_DIR})

    # 第三方库目录
    SET(CMAKE_3RD_DIR_MYSQL   ${CMAKE_PROJECT_ROOT_DIR}/3rd/3rd-libs/mysql-8.0.33/x64-windows)
    SET(CMAKE_3RD_DIR_OPENSSL ${CMAKE_PROJECT_ROOT_DIR}/3rd/3rd-libs/openssl-1.1.1t/x64-windows)

    # 静态库 & 动态库的前缀
    SET(CMAKE_STATIC_LIBRARY_PREFIX "lib")
    SET(CMAKE_SHARED_LIBRARY_PREFIX "lib")

    # 设置MTd & MT
    SET(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

    # 设置项目支持的最低操作系统版本
    # _WIN32_WINNT_NT4          0x0400 // Windows NT 4.0
    # _WIN32_WINNT_WIN2K        0x0500 // Windows 2000
    # _WIN32_WINNT_WINXP        0x0501 // Windows XP
    # _WIN32_WINNT_WS03         0x0502 // Windows Server 2003
    # _WIN32_WINNT_WIN6         0x0600 // Windows Vista
    # _WIN32_WINNT_VISTA        0x0600 // Windows Vista
    # _WIN32_WINNT_WS08         0x0600 // Windows Server 2008
    # _WIN32_WINNT_LONGHORN     0x0600 // Windows Vista
    # _WIN32_WINNT_WIN7         0x0601 // Windows 7
    # _WIN32_WINNT_WIN8         0x0602 // Windows 8
    # _WIN32_WINNT_WINBLUE      0x0603 // Windows 8.1
    # _WIN32_WINNT_WINTHRESHOLD 0x0A00 // Windows 10
    # _WIN32_WINNT_WIN10        0x0A00 // Windows 10
    SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -D_WIN32_WINNT=0x0A00")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN32_WINNT=0x0A00")
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    # 编译选项
    SET(CMAKE_C_FLAGS           "${CMAKE_C_FLAGS} -std=c11 -Wall -Werror")
    SET(CMAKE_C_FLAGS_DEBUG     "${CMAKE_C_FLAGS_DEBUG}")
    SET(CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}")

    SET(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Werror")
    SET(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

    # 生成目录
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_PROJECT_BUILD_ROOT_DIR}/${CMAKE_BUILD_TYPE})
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_PROJECT_BUILD_ROOT_DIR}/${CMAKE_BUILD_TYPE})
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_PROJECT_BUILD_ROOT_DIR}/${CMAKE_BUILD_TYPE})

    # 第三方库目录
    SET(CMAKE_3RD_DIR_MYSQL   ${CMAKE_PROJECT_ROOT_DIR}/3rd/3rd-libs/mysql-8.0.33/x64-ubuntu-20.04)
    SET(CMAKE_3RD_DIR_OPENSSL ${CMAKE_PROJECT_ROOT_DIR}/3rd/3rd-libs/openssl-1.1.1t/x64-ubuntu-20.04)

    # 静态库 & 动态库的前缀
    SET(CMAKE_STATIC_LIBRARY_PREFIX "lib")
    SET(CMAKE_SHARED_LIBRARY_PREFIX "lib")
ELSE()
    MESSAGE(FATAL_ERROR "The current platform is unsupported!")
ENDIF()

# 添加子目录
ADD_SUBDIRECTORY(3rd)
ADD_SUBDIRECTORY(projects)

# VS工程设置
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
    SET_PROPERTY(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "cmake")
ENDIF()

# 调试信息
MESSAGE(STATUS "---------------------------------------------------------------------")
MESSAGE(STATUS "CMAKE_PROJECT_NAME             = ${CMAKE_PROJECT_NAME}")
MESSAGE(STATUS "CMAKE_SOURCE_DIR               = ${CMAKE_SOURCE_DIR}")
MESSAGE(STATUS "CMAKE_BINARY_DIR               = ${CMAKE_BINARY_DIR}")
MESSAGE(STATUS "PROJECT_NAME                   = ${PROJECT_NAME}")
MESSAGE(STATUS "PROJECT_SOURCE_DIR             = ${PROJECT_SOURCE_DIR}")
MESSAGE(STATUS "PROJECT_BINARY_DIR             = ${PROJECT_BINARY_DIR}")
MESSAGE(STATUS "CMAKE_PROJECT_ROOT_DIR         = ${CMAKE_PROJECT_ROOT_DIR}")
MESSAGE(STATUS "CMAKE_PROJECT_BUILD_ROOT_DIR   = ${CMAKE_PROJECT_BUILD_ROOT_DIR}")
MESSAGE(STATUS "CMAKE_ARCHIVE_OUTPUT_DIRECTORY = ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "CMAKE_LIBRARY_OUTPUT_DIRECTORY = ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "CMAKE_RUNTIME_OUTPUT_DIRECTORY = ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "CMAKE_3RD_DIR_MYSQL            = ${CMAKE_3RD_DIR_MYSQL}")
MESSAGE(STATUS "CMAKE_3RD_DIR_OPENSSL          = ${CMAKE_3RD_DIR_OPENSSL}")
MESSAGE(STATUS "CMAKE_SYSTEM_NAME              = ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "CMAKE_SYSTEM_VERSION           = C${CMAKE_SYSTEM_VERSION}")
MESSAGE(STATUS "CMAKE_C_STANDARD               = C${CMAKE_C_STANDARD}")
MESSAGE(STATUS "CMAKE_CXX_STANDARD             = C++${CMAKE_CXX_STANDARD}")
MESSAGE(STATUS "CMAKE_BUILD_TYPE               = ${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "CMAKE_C_FLAGS                  = ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "CMAKE_C_FLAGS_DEBUG            = ${CMAKE_C_FLAGS_DEBUG}")
MESSAGE(STATUS "CMAKE_C_FLAGS_RELEASE          = ${CMAKE_C_FLAGS_RELEASE}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS                = ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS_DEBUG          = ${CMAKE_CXX_FLAGS_DEBUG}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS_RELEASE        = ${CMAKE_CXX_FLAGS_RELEASE}")
MESSAGE(STATUS "---------------------------------------------------------------------")