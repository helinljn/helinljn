// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestMsgStruct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TestMsgStruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TestMsgStruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TestMsgDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TestMsgStruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TestMsgStruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TestMsgStruct_2eproto;
namespace TestMsg {
class TestCommonInfo;
struct TestCommonInfoDefaultTypeInternal;
extern TestCommonInfoDefaultTypeInternal _TestCommonInfo_default_instance_;
class TestCommonInfoList;
struct TestCommonInfoListDefaultTypeInternal;
extern TestCommonInfoListDefaultTypeInternal _TestCommonInfoList_default_instance_;
}  // namespace TestMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::TestMsg::TestCommonInfo* Arena::CreateMaybeMessage<::TestMsg::TestCommonInfo>(Arena*);
template<> ::TestMsg::TestCommonInfoList* Arena::CreateMaybeMessage<::TestMsg::TestCommonInfoList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TestMsg {

// ===================================================================

class TestCommonInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestMsg.TestCommonInfo) */ {
 public:
  inline TestCommonInfo() : TestCommonInfo(nullptr) {}
  ~TestCommonInfo() override;
  explicit constexpr TestCommonInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCommonInfo(const TestCommonInfo& from);
  TestCommonInfo(TestCommonInfo&& from) noexcept
    : TestCommonInfo() {
    *this = ::std::move(from);
  }

  inline TestCommonInfo& operator=(const TestCommonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCommonInfo& operator=(TestCommonInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCommonInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCommonInfo* internal_default_instance() {
    return reinterpret_cast<const TestCommonInfo*>(
               &_TestCommonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestCommonInfo& a, TestCommonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCommonInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCommonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCommonInfo* New() const final {
    return new TestCommonInfo();
  }

  TestCommonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCommonInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCommonInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestCommonInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCommonInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestMsg.TestCommonInfo";
  }
  protected:
  explicit TestCommonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestStringFieldNumber = 3,
    kTestDoubleFieldNumber = 2,
    kTestFloatFieldNumber = 1,
    kTestInt32FieldNumber = 4,
    kTestSint32FieldNumber = 5,
    kTestUint32FieldNumber = 6,
    kTestInt64FieldNumber = 7,
    kTestSint64FieldNumber = 8,
    kTestUint64FieldNumber = 9,
  };
  // bytes test_string = 3;
  void clear_test_string();
  const std::string& test_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_test_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_test_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_test_string();
  void set_allocated_test_string(std::string* test_string);
  private:
  const std::string& _internal_test_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_string(const std::string& value);
  std::string* _internal_mutable_test_string();
  public:

  // double test_double = 2;
  void clear_test_double();
  double test_double() const;
  void set_test_double(double value);
  private:
  double _internal_test_double() const;
  void _internal_set_test_double(double value);
  public:

  // float test_float = 1;
  void clear_test_float();
  float test_float() const;
  void set_test_float(float value);
  private:
  float _internal_test_float() const;
  void _internal_set_test_float(float value);
  public:

  // int32 test_int32 = 4;
  void clear_test_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 test_int32() const;
  void set_test_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_int32() const;
  void _internal_set_test_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 test_sint32 = 5;
  void clear_test_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 test_sint32() const;
  void set_test_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_sint32() const;
  void _internal_set_test_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 test_uint32 = 6;
  void clear_test_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 test_uint32() const;
  void set_test_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_test_uint32() const;
  void _internal_set_test_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 test_int64 = 7;
  void clear_test_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 test_int64() const;
  void set_test_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_test_int64() const;
  void _internal_set_test_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 test_sint64 = 8;
  void clear_test_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 test_sint64() const;
  void set_test_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_test_sint64() const;
  void _internal_set_test_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 test_uint64 = 9;
  void clear_test_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 test_uint64() const;
  void set_test_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_test_uint64() const;
  void _internal_set_test_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TestMsg.TestCommonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_string_;
  double test_double_;
  float test_float_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_int32_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_sint32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_uint32_;
  ::PROTOBUF_NAMESPACE_ID::int64 test_int64_;
  ::PROTOBUF_NAMESPACE_ID::int64 test_sint64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 test_uint64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TestMsgStruct_2eproto;
};
// -------------------------------------------------------------------

class TestCommonInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestMsg.TestCommonInfoList) */ {
 public:
  inline TestCommonInfoList() : TestCommonInfoList(nullptr) {}
  ~TestCommonInfoList() override;
  explicit constexpr TestCommonInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCommonInfoList(const TestCommonInfoList& from);
  TestCommonInfoList(TestCommonInfoList&& from) noexcept
    : TestCommonInfoList() {
    *this = ::std::move(from);
  }

  inline TestCommonInfoList& operator=(const TestCommonInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCommonInfoList& operator=(TestCommonInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCommonInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCommonInfoList* internal_default_instance() {
    return reinterpret_cast<const TestCommonInfoList*>(
               &_TestCommonInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestCommonInfoList& a, TestCommonInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCommonInfoList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCommonInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCommonInfoList* New() const final {
    return new TestCommonInfoList();
  }

  TestCommonInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCommonInfoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCommonInfoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestCommonInfoList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCommonInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestMsg.TestCommonInfoList";
  }
  protected:
  explicit TestCommonInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonInfoListFieldNumber = 1,
    kCommonTypeListFieldNumber = 2,
  };
  // repeated .TestMsg.TestCommonInfo common_info_list = 1;
  int common_info_list_size() const;
  private:
  int _internal_common_info_list_size() const;
  public:
  void clear_common_info_list();
  ::TestMsg::TestCommonInfo* mutable_common_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestMsg::TestCommonInfo >*
      mutable_common_info_list();
  private:
  const ::TestMsg::TestCommonInfo& _internal_common_info_list(int index) const;
  ::TestMsg::TestCommonInfo* _internal_add_common_info_list();
  public:
  const ::TestMsg::TestCommonInfo& common_info_list(int index) const;
  ::TestMsg::TestCommonInfo* add_common_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestMsg::TestCommonInfo >&
      common_info_list() const;

  // repeated .TestMsg.TestCommonType common_type_list = 2;
  int common_type_list_size() const;
  private:
  int _internal_common_type_list_size() const;
  public:
  void clear_common_type_list();
  private:
  ::TestMsg::TestCommonType _internal_common_type_list(int index) const;
  void _internal_add_common_type_list(::TestMsg::TestCommonType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_common_type_list();
  public:
  ::TestMsg::TestCommonType common_type_list(int index) const;
  void set_common_type_list(int index, ::TestMsg::TestCommonType value);
  void add_common_type_list(::TestMsg::TestCommonType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& common_type_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_common_type_list();

  // @@protoc_insertion_point(class_scope:TestMsg.TestCommonInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestMsg::TestCommonInfo > common_info_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> common_type_list_;
  mutable std::atomic<int> _common_type_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TestMsgStruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestCommonInfo

// float test_float = 1;
inline void TestCommonInfo::clear_test_float() {
  test_float_ = 0;
}
inline float TestCommonInfo::_internal_test_float() const {
  return test_float_;
}
inline float TestCommonInfo::test_float() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_float)
  return _internal_test_float();
}
inline void TestCommonInfo::_internal_set_test_float(float value) {
  
  test_float_ = value;
}
inline void TestCommonInfo::set_test_float(float value) {
  _internal_set_test_float(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_float)
}

// double test_double = 2;
inline void TestCommonInfo::clear_test_double() {
  test_double_ = 0;
}
inline double TestCommonInfo::_internal_test_double() const {
  return test_double_;
}
inline double TestCommonInfo::test_double() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_double)
  return _internal_test_double();
}
inline void TestCommonInfo::_internal_set_test_double(double value) {
  
  test_double_ = value;
}
inline void TestCommonInfo::set_test_double(double value) {
  _internal_set_test_double(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_double)
}

// bytes test_string = 3;
inline void TestCommonInfo::clear_test_string() {
  test_string_.ClearToEmpty();
}
inline const std::string& TestCommonInfo::test_string() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_string)
  return _internal_test_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestCommonInfo::set_test_string(ArgT0&& arg0, ArgT... args) {
 
 test_string_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_string)
}
inline std::string* TestCommonInfo::mutable_test_string() {
  std::string* _s = _internal_mutable_test_string();
  // @@protoc_insertion_point(field_mutable:TestMsg.TestCommonInfo.test_string)
  return _s;
}
inline const std::string& TestCommonInfo::_internal_test_string() const {
  return test_string_.Get();
}
inline void TestCommonInfo::_internal_set_test_string(const std::string& value) {
  
  test_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestCommonInfo::_internal_mutable_test_string() {
  
  return test_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestCommonInfo::release_test_string() {
  // @@protoc_insertion_point(field_release:TestMsg.TestCommonInfo.test_string)
  return test_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestCommonInfo::set_allocated_test_string(std::string* test_string) {
  if (test_string != nullptr) {
    
  } else {
    
  }
  test_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TestMsg.TestCommonInfo.test_string)
}

// int32 test_int32 = 4;
inline void TestCommonInfo::clear_test_int32() {
  test_int32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCommonInfo::_internal_test_int32() const {
  return test_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCommonInfo::test_int32() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_int32)
  return _internal_test_int32();
}
inline void TestCommonInfo::_internal_set_test_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_int32_ = value;
}
inline void TestCommonInfo::set_test_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_int32(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_int32)
}

// sint32 test_sint32 = 5;
inline void TestCommonInfo::clear_test_sint32() {
  test_sint32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCommonInfo::_internal_test_sint32() const {
  return test_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCommonInfo::test_sint32() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_sint32)
  return _internal_test_sint32();
}
inline void TestCommonInfo::_internal_set_test_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_sint32_ = value;
}
inline void TestCommonInfo::set_test_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_sint32(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_sint32)
}

// uint32 test_uint32 = 6;
inline void TestCommonInfo::clear_test_uint32() {
  test_uint32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestCommonInfo::_internal_test_uint32() const {
  return test_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestCommonInfo::test_uint32() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_uint32)
  return _internal_test_uint32();
}
inline void TestCommonInfo::_internal_set_test_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  test_uint32_ = value;
}
inline void TestCommonInfo::set_test_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_test_uint32(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_uint32)
}

// int64 test_int64 = 7;
inline void TestCommonInfo::clear_test_int64() {
  test_int64_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestCommonInfo::_internal_test_int64() const {
  return test_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestCommonInfo::test_int64() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_int64)
  return _internal_test_int64();
}
inline void TestCommonInfo::_internal_set_test_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  test_int64_ = value;
}
inline void TestCommonInfo::set_test_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_test_int64(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_int64)
}

// sint64 test_sint64 = 8;
inline void TestCommonInfo::clear_test_sint64() {
  test_sint64_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestCommonInfo::_internal_test_sint64() const {
  return test_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestCommonInfo::test_sint64() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_sint64)
  return _internal_test_sint64();
}
inline void TestCommonInfo::_internal_set_test_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  test_sint64_ = value;
}
inline void TestCommonInfo::set_test_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_test_sint64(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_sint64)
}

// uint64 test_uint64 = 9;
inline void TestCommonInfo::clear_test_uint64() {
  test_uint64_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestCommonInfo::_internal_test_uint64() const {
  return test_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestCommonInfo::test_uint64() const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfo.test_uint64)
  return _internal_test_uint64();
}
inline void TestCommonInfo::_internal_set_test_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  test_uint64_ = value;
}
inline void TestCommonInfo::set_test_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_test_uint64(value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfo.test_uint64)
}

// -------------------------------------------------------------------

// TestCommonInfoList

// repeated .TestMsg.TestCommonInfo common_info_list = 1;
inline int TestCommonInfoList::_internal_common_info_list_size() const {
  return common_info_list_.size();
}
inline int TestCommonInfoList::common_info_list_size() const {
  return _internal_common_info_list_size();
}
inline void TestCommonInfoList::clear_common_info_list() {
  common_info_list_.Clear();
}
inline ::TestMsg::TestCommonInfo* TestCommonInfoList::mutable_common_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:TestMsg.TestCommonInfoList.common_info_list)
  return common_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestMsg::TestCommonInfo >*
TestCommonInfoList::mutable_common_info_list() {
  // @@protoc_insertion_point(field_mutable_list:TestMsg.TestCommonInfoList.common_info_list)
  return &common_info_list_;
}
inline const ::TestMsg::TestCommonInfo& TestCommonInfoList::_internal_common_info_list(int index) const {
  return common_info_list_.Get(index);
}
inline const ::TestMsg::TestCommonInfo& TestCommonInfoList::common_info_list(int index) const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfoList.common_info_list)
  return _internal_common_info_list(index);
}
inline ::TestMsg::TestCommonInfo* TestCommonInfoList::_internal_add_common_info_list() {
  return common_info_list_.Add();
}
inline ::TestMsg::TestCommonInfo* TestCommonInfoList::add_common_info_list() {
  ::TestMsg::TestCommonInfo* _add = _internal_add_common_info_list();
  // @@protoc_insertion_point(field_add:TestMsg.TestCommonInfoList.common_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestMsg::TestCommonInfo >&
TestCommonInfoList::common_info_list() const {
  // @@protoc_insertion_point(field_list:TestMsg.TestCommonInfoList.common_info_list)
  return common_info_list_;
}

// repeated .TestMsg.TestCommonType common_type_list = 2;
inline int TestCommonInfoList::_internal_common_type_list_size() const {
  return common_type_list_.size();
}
inline int TestCommonInfoList::common_type_list_size() const {
  return _internal_common_type_list_size();
}
inline void TestCommonInfoList::clear_common_type_list() {
  common_type_list_.Clear();
}
inline ::TestMsg::TestCommonType TestCommonInfoList::_internal_common_type_list(int index) const {
  return static_cast< ::TestMsg::TestCommonType >(common_type_list_.Get(index));
}
inline ::TestMsg::TestCommonType TestCommonInfoList::common_type_list(int index) const {
  // @@protoc_insertion_point(field_get:TestMsg.TestCommonInfoList.common_type_list)
  return _internal_common_type_list(index);
}
inline void TestCommonInfoList::set_common_type_list(int index, ::TestMsg::TestCommonType value) {
  common_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TestMsg.TestCommonInfoList.common_type_list)
}
inline void TestCommonInfoList::_internal_add_common_type_list(::TestMsg::TestCommonType value) {
  common_type_list_.Add(value);
}
inline void TestCommonInfoList::add_common_type_list(::TestMsg::TestCommonType value) {
  _internal_add_common_type_list(value);
  // @@protoc_insertion_point(field_add:TestMsg.TestCommonInfoList.common_type_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestCommonInfoList::common_type_list() const {
  // @@protoc_insertion_point(field_list:TestMsg.TestCommonInfoList.common_type_list)
  return common_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestCommonInfoList::_internal_mutable_common_type_list() {
  return &common_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestCommonInfoList::mutable_common_type_list() {
  // @@protoc_insertion_point(field_mutable_list:TestMsg.TestCommonInfoList.common_type_list)
  return _internal_mutable_common_type_list();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TestMsgStruct_2eproto
