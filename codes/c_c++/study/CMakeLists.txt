# CMake最低版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.15)

# C/C++语言标准
SET(CMAKE_C_STANDARD            11)
SET(CMAKE_C_STANDARD_REQUIRED   ON)
SET(CMAKE_C_EXTENSIONS          OFF)
SET(CMAKE_CXX_STANDARD          17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS        OFF)

# Debug & Release选项
IF(NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug") AND NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "Release"))
    SET(CMAKE_BUILD_TYPE "Release" CACHE STRING INTERNAL FORCE)
    MESSAGE(STATUS "CMAKE_BUILD_TYPE is invalid, must be one of 'Debug | Release', set default build type to 'Release'.")
ENDIF()

# 项目名字
PROJECT(study)

# 编译选项、优先链接静态库
IF(MSVC)
    # 编译选项
    SET(CMAKE_C_FLAGS           "${CMAKE_C_FLAGS} /std:c11 /permissive- /Zc:__cplusplus /W4 /WX /MP")
    SET(CMAKE_C_FLAGS_DEBUG     "${CMAKE_C_FLAGS_DEBUG}")
    SET(CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}")

    SET(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} /std:c++17 /permissive- /Zc:__cplusplus /W4 /WX /MP")
    SET(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

    # 优先链接静态库
    SET(CMAKE_FIND_LIBRARY_SUFFIXES .lib .dll ${CMAKE_FIND_LIBRARY_SUFFIXES})

    # 设置静态库 & 动态库的库前缀
    SET(CMAKE_STATIC_LIBRARY_PREFIX "lib")
    SET(CMAKE_SHARED_LIBRARY_PREFIX "lib")

    # 设置MTd & MT
    SET(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

    # 设置项目支持的最低操作系统版本
    # _WIN32_WINNT_NT4          0x0400 // Windows NT 4.0
    # _WIN32_WINNT_WIN2K        0x0500 // Windows 2000
    # _WIN32_WINNT_WINXP        0x0501 // Windows XP
    # _WIN32_WINNT_WS03         0x0502 // Windows Server 2003
    # _WIN32_WINNT_WIN6         0x0600 // Windows Vista
    # _WIN32_WINNT_VISTA        0x0600 // Windows Vista
    # _WIN32_WINNT_WS08         0x0600 // Windows Server 2008
    # _WIN32_WINNT_LONGHORN     0x0600 // Windows Vista
    # _WIN32_WINNT_WIN7         0x0601 // Windows 7
    # _WIN32_WINNT_WIN8         0x0602 // Windows 8
    # _WIN32_WINNT_WINBLUE      0x0603 // Windows 8.1
    # _WIN32_WINNT_WINTHRESHOLD 0x0A00 // Windows 10
    # _WIN32_WINNT_WIN10        0x0A00 // Windows 10
    SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -D_WIN32_WINNT=0x0601")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN32_WINNT=0x0601")

    # 消除 WinBase.h 中 MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS 宏定义导致的 C5105 编译警告
    #SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -DMICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS=0")
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS=0")
ELSE()
    # 编译选项
    SET(CMAKE_C_FLAGS           "${CMAKE_C_FLAGS} -std=c11 -Wall -Wextra -Wpedantic -Werror")
    SET(CMAKE_C_FLAGS_DEBUG     "${CMAKE_C_FLAGS_DEBUG}")
    SET(CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}")

    SET(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra -Wpedantic -Werror")
    SET(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

    # 优先链接静态库
    SET(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
ENDIF()

# 设置生成目录
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/.build/${CMAKE_BUILD_TYPE})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/.build/${CMAKE_BUILD_TYPE})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/.build/${CMAKE_BUILD_TYPE})

# 依赖列表，用于生成可执行文件时的编译依赖
SET(CURRENT_DEPENDENT_LIBS_LIST "" CACHE STRING INTERNAL FORCE)

# vcpkg静态库目录修正
IF("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    SET(VCPKG_LIBS_DIR_REFIX  "debug")
ELSE()
    SET(VCPKG_LIBS_DIR_REFIX  ".")
ENDIF()

# 添加子目录
ADD_SUBDIRECTORY(3rd)
ADD_SUBDIRECTORY(projects)

# 调试信息
MESSAGE(STATUS "---------------------------------------------------------------------")
MESSAGE(STATUS "CMAKE_PROJECT_NAME             = ${CMAKE_PROJECT_NAME}")
MESSAGE(STATUS "PROJECT_NAME                   = ${PROJECT_NAME}")
MESSAGE(STATUS "PROJECT_SOURCE_DIR             = ${PROJECT_SOURCE_DIR}")
MESSAGE(STATUS "PROJECT_BINARY_DIR             = ${PROJECT_BINARY_DIR}")
MESSAGE(STATUS "CMAKE_ARCHIVE_OUTPUT_DIRECTORY = ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "CMAKE_LIBRARY_OUTPUT_DIRECTORY = ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "CMAKE_RUNTIME_OUTPUT_DIRECTORY = ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "CMAKE_C_STANDARD               = C${CMAKE_C_STANDARD}")
MESSAGE(STATUS "CMAKE_CXX_STANDARD             = C++${CMAKE_CXX_STANDARD}")
MESSAGE(STATUS "CMAKE_BUILD_TYPE               = ${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "CMAKE_C_FLAGS                  = ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "CMAKE_C_FLAGS_DEBUG            = ${CMAKE_C_FLAGS_DEBUG}")
MESSAGE(STATUS "CMAKE_C_FLAGS_RELEASE          = ${CMAKE_C_FLAGS_RELEASE}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS                = ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS_DEBUG          = ${CMAKE_CXX_FLAGS_DEBUG}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS_RELEASE        = ${CMAKE_CXX_FLAGS_RELEASE}")
MESSAGE(STATUS "CMAKE_FIND_LIBRARY_SUFFIXES    = ${CMAKE_FIND_LIBRARY_SUFFIXES}")
MESSAGE(STATUS "CURRENT_DEPENDENT_LIBS_LIST    = ${CURRENT_DEPENDENT_LIBS_LIST}")
MESSAGE(STATUS "---------------------------------------------------------------------")